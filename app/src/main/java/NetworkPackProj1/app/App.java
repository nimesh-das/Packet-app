/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package NetworkPackProj1.app;

// Declare a whole bunch of imports from pcap, java and sl4j
import NetworkPackProj1.list.LinkedList;
import static NetworkPackProj1.utilities.StringUtils.join;
import static NetworkPackProj1.utilities.StringUtils.split;
import static NetworkPackProj1.app.MessageUtils.getMessage;
import java.net.InetAddress;
import java.net.Inet4Address;
import org.pcap4j.core.*;
import org.pcap4j.core.PcapNetworkInterface.PromiscuousMode;
import java.io.IOException;
import org.pcap4j.core.BpfProgram.BpfCompileMode;
import org.pcap4j.core.NotOpenException;
import org.pcap4j.core.PacketListener;
import org.pcap4j.core.PcapHandle;
import org.pcap4j.core.PcapNativeException;
import org.pcap4j.core.PcapNetworkInterface;
import org.pcap4j.packet.Packet;
import org.pcap4j.util.NifSelector;
import org.pcap4j.packet.IpV4Packet;
import java.net.UnknownHostException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Base64;

public class App {

    // Properties
        int timeout;
        int snapLen;
        int maxPackets;
        PacketListener listener;
        PcapHandle handle;
        PromiscuousMode mode;
        InetAddress addr;
        PcapNetworkInterface nic;

    // Constructor initialization
    App() throws Exception {
        this.timeout = 50;
        this.snapLen = 65536;
        this.maxPackets = 10;
        this.SetupNic();
        this.SetupPcapHandle();
    }

    // Setup the network interface on which you wll do the capture
    public void SetupNic() throws Exception {

        addr = InetAddress.getByName("<Insert-ip-address>");
        nic = Pcaps.getDevByAddress(addr);

    }

    // Open a pcaphandle which is essentially the class responsible for capturing
    // streams of packets, sending packets, etc
    public void SetupPcapHandle() throws Exception {

        mode = PromiscuousMode.PROMISCUOUS;
        handle = nic.openLive(snapLen, mode, timeout);

    }

    // Create a listener that defines what to do with the received packets
    public void ProcessPackets() throws Exception {

        PacketListener listener = new PacketListener() {
        @Override
        public void gotPacket(Packet packet) {
            // Override the default gotPacket() function and process packet
            System.out.println(handle.getTimestamp());
            System.out.println(packet);
            }
        };

        // Tell the handle to loop using the listener we created
        handle.loop(maxPackets, listener);
        
        // Cleanup when complete
        handle.close();
    }

    public static void main(String[] args) throws Exception {
        try {
            App myapp = new App();
            myapp.ProcessPackets();

        } catch (PcapNativeException | UnknownHostException e) {
            e.printStackTrace();
            throw e;
        }
    }
}
